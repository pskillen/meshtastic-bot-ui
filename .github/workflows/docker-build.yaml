name: docker-build-and-push

on:
  workflow_call:
    inputs:
      VERSION_TAG:
        required: true
        type: string
      IS_LATEST:
        required: false
        type: boolean
        default: false
      IS_PRERELEASE:
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
        include:
          - platform: linux/amd64
            base_image: "node:20-alpine"
          - platform: linux/arm64
            base_image: "arm64v8/node:20-alpine"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Setup vars
        run: |
          PLATFORM_TAG=$(echo "${{ matrix.platform }}" | sed 's|/|-|g')
          echo "PLATFORM_TAG=$PLATFORM_TAG" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --build-arg BASE_IMAGE=${{ matrix.base_image }} \
            -t ghcr.io/${{ github.repository }}:${{ inputs.VERSION_TAG }}-${{ env.PLATFORM_TAG }} \
            -f Dockerfile \
            --push .

  create-manifest:
    runs-on: ubuntu-latest
    needs:
      - build-and-push

    steps:
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Create and Push Multi-Arch Manifest
        run: |
          docker buildx imagetools create \
            -t ghcr.io/${{ github.repository }}:${{ inputs.VERSION_TAG }} \
            ghcr.io/${{ github.repository }}:${{ inputs.VERSION_TAG }}-linux-amd64 \
            ghcr.io/${{ github.repository }}:${{ inputs.VERSION_TAG }}-linux-arm64

      - name: Tag as Latest or RC
        if: ${{ inputs.IS_LATEST == true }}
        run: |
          if [[ "${{ inputs.IS_PRERELEASE }}" == "true" ]]; then
            docker buildx imagetools create \
              -t ghcr.io/${{ github.repository }}:latest-rc \
              ghcr.io/${{ github.repository }}:${{ inputs.VERSION_TAG }}
          else
            docker buildx imagetools create \
              -t ghcr.io/${{ github.repository }}:latest \
              ghcr.io/${{ github.repository }}:${{ inputs.VERSION_TAG }}
          fi 